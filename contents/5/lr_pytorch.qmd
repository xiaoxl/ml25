## Linear regression (`PyTorch`)

### Construct `torch.Tensor`
There are multiple ways to construct a tensor. I just discuss those confusing ones. 

- `torch.Tensor` is the `PyTorch` tensor data structure. Itself serves as the constructor of the class, therefore you may use `torch.Tensor(data)` to construct a tensor. This is relative basic, and will have a default `float` type.
- `torch.tensor` is the recommendated function to construct a tensor from data. It has two benefits over `torch.Tensor`: it will automatically induce the datatype from data instead of always using `float`; and it is easier to change datatype with the argument `dtype`.
- `torch.as_tensor` is a function to construct a tensor from data. If the original data is numpy array, this tensor shares data with it. This means that if one is changed, the other is changed as well.


```{python}
import numpy as np
import torch

example = np.array([1, 2])
example_tensor0 = torch.Tensor(example)
example_tensor1 = torch.tensor(example)
example_tensor2 = torch.as_tensor(example)

print(f'Tensor: dtype: {example_tensor0.dtype}, tensor: dtype: {example_tensor1.dtype}')

print(f'tensor: {example_tensor1}, as_tensor: {example_tensor2}, original: {example}')

example[0] = 0
print(f'tensor: {example_tensor1}, as_tensor: {example_tensor2}, original: {example}')
```

In general, it is recommended to use `torch.as_tensor` over `torch.tensor` (since for large data to create a view is much faster than to create a copy) and to use `torch.tensor` over `torch.Tensor` (due to the benefits mentioned above).


::: {.callout-note}
# Scalar
A tensor with only one element is still a tensor in `PyTorch`. To use it as a scalar, you need to use `itme()` method.

```{python}
a = torch.tensor(1)
a
```

```{python}
a.item()
```

Note that for `numpy`, before 2.0 version an array with one element is considered as scalar. However after 2.0, it behaves very similar to `PyTorch`.
:::


::: {.callout-note}
# datatype  
The datatype in `PyTorch` is very strict. Many functions can work with only some of the datatypes. In most cases `float` and `double` are used. Other types may or may not be supported by a specific function. 

However, there are a lot of ways to play with types. For example, you may use `torch.tensor([1], dtype=torch.double)` to directly construct a `double` tensor, or use `torch.tensor([1]).double()` to first construct an `int` tensor and then cast it into a `double` tensor.
:::

::: {.callout-note}
# another datatype note
`numpy` also has `dtype` setting but since it is not strict on it, we ignored it previous. Here is the case: the default setting for `numpy` is `double` type, or `float64`, while in `PyTorch` `float`, or `float32`, is commonly used. Since the precision is different, when cast from `double` to `float`, the number might be changed a little bit. 

```{python}
a = np.random.random(1)
b = torch.as_tensor(a)
c = torch.as_tensor(a, dtype=torch.float)
d = torch.as_tensor(a, dtype=float)
e = torch.as_tensor(a, dtype=torch.float64)
f = b.float()
g = f.double()
print(f'a: {a[0]}, type of a: {a.dtype}\n'
      f'b: {b.item()}, type of b: {b.dtype}\n'
      f'c: {c.item()}, type of c: {c.dtype}\n'
      f'd: {d.item()}, type of d: {d.dtype}\n'
      f'e: {e.item()}, type of e: {e.dtype}\n'
      f'f: {f.item()}, type of e: {f.dtype}\n'
      f'g: {g.item()}, type of e: {g.dtype}\n')
```
You may notice the difference from the example, and also take notes about the convetion of which setting is corresponding to which type. Note that `dtype=float` actually create `double` type.

In this notes we will use `double` type by setting `dtype=float` or `torch.float64` to reduce the possibility of that small differences.
:::



We now construct a `PyTorch` tensor version of the dataset we used in previous sections. The `device` part will be introduced later.

```{python}
import numpy as np
from sklearn.model_selection import train_test_split
import torch

RANDOMSEED = 42
np.random.seed(RANDOMSEED)
device = 'cuda' if torch.cuda.is_available() else 'cpu'

X = np.random.rand(100)
y = 2.3 + 1.2 * X + np.random.randn(100) * 0.1
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.15,
                                                    random_state=RANDOMSEED)
X_tensor_train = torch.as_tensor(X_train, device=device, dtype=float)
y_tensor_train = torch.as_tensor(y_train, device=device, dtype=float)
```



::: {.callout-note}
# Back to `numpy`
If we would like to turn a tensor back to `numpy`, usually we would like to remove it from related computation graphs and just keep the data. Therefore usually we would like to apply `detach()` method to the tensor before converting. Also later we will talk about devices. When taking GPU into consideration, we also want to send the tensor back to CPU before converting. Therefore the code to turn a `PyTorch` tensor to a `numpy` array is `x.detach().cpu().numpy()`.
:::

### devices
We coulde use `torch.cuda.is_available()` to check whether we have GPU/CUDA supported devices. If the answer is no, we don't need to change any codes and everything works fine but slow.

If we have GPU/CUDA supported devices, we could send our tensors to them and do computations there. Google Colab is a good place to play with it if we don't have our own hardware.

In most cases we use `to(device)` method to send a tensor to a device. Sometimes some function has `device=device` argument to automatically construct tensors in a device. Note that if one needs to compute the gradient of a tensor and send the tensor to a device, we need to manually set `requires_grad_(True)` or create the tensor with `device` argument. 


::: {.callout-note}
# `to(device)`
When sending tensors to other devices by `to`, gradient info might be lost. Therefore if we need to send trainable tensors to GPU some special methods should be used (e.g. setting `device` when creating the tensor). However for the dataset we don't need to worry about it.
:::

Here are some examples, although they only makes sense in a GPU environment.

```{python}
#| eval: false
device = 'cuda' if torch.cuda.is_available() else 'cpu'

t1 = torch.tensor(1, dtype=float, device=device)
t2 = torch.tensor(1, dtype=float)
print(f't1: {t1.type()}, t2: {t2.type()}')
```
If you can see `cuda` in the output of `type`, it is a GPU tensor. Otherwise it is a CPU tensor. We may use `to` to convert a CPU tensor to be a GPU tensor. If this tensor requires gradient, we should set it manually.



```{python}
#| eval: false
t3 = t2.to(device)
t3 = t3.requires_grad_(True)
```

It is usually recommended to write codes with `device` in mind like above, since the codes work for both CPU and GPU machines.



### Gradient {#sec-gradientdescent_pytorch_example}
`PyTorch` can use `autograd` to automatically compute the gradient of given formula. All computations are done within the context of tensors. The biggest difference between `PyTorch` tensor and `numpy` array is that `PyTorch` tensor carries gradient infomation on its own. 

The step is very easy: first use `PyTorch` tensor to write a formula, enable gradients on correct tensors, and then use the `backward()` method.


```{python}
b = torch.tensor(1, dtype=float, device=device, requires_grad=True)
w = torch.tensor(1.5, dtype=float, device=device, requires_grad=True)

loss = ((y_tensor_train - b - w * X_tensor_train)**2).mean()
loss.backward()
print(f'db: {b.grad}, dw: {w.grad}')
```

We could manually compute the first few iterations and record the results. You may compare it with the `numpy` implementation in @sec-gradeientdescent_numpy_example. The answer is exactly the same.


```{python}
b = torch.tensor(1, dtype=float, device=device, requires_grad=True)
w = torch.tensor(1.5, dtype=float, device=device, requires_grad=True)
lr = 0.2
plist = []
for _ in range(10):
    loss = ((y_tensor_train - b - w * X_tensor_train)**2).mean()
    loss.backward()
    with torch.no_grad():
        b -= lr * b.grad
        w -= lr * w.grad
    b.grad.zero_()
    w.grad.zero_()
    plist.append([b.item(), w.item()])
    
plist
```




::: {.callout-note}
The code has some tricky parts. The main issue is to let `PyTorch` know which gradient infomation should be kept, which should not. In this code, to make it run correctly, we need to pay attention to the following three things:

- Before updating `b` and `w`, `with torch.no_grad()` should be used, to tell `PyTorch` don't compute gradient here.
- When updating `b` and `w`, we should use the in-place syntax `b -= db` instead of `b = b - db`. Again, the reason is related to updating gradient: the out-of-place syntax `b = b - db` will lose the grad info.
- After updating `b` and `w`, we need to zero out the grad info by applying `b.grad.zero_()` and `w.grad.zero_()`.
:::

We will skip mini-batch gradient descent here, and leave it to the next section with a more systematic treatment.


### Optimizers

After we get the gradient, there are still many tricks to move one step further. We already talked about the learning rate before. It is not the only case. Another example is that sometimes we don't really want to move in the direction given by the gradient, but we want to modify it a little bit. All these tricks are combined together and are called optimizers.

An optimizer is a set of rules to update parameters after the gradient is computed. We already talked about `SGD` (stochastic gradient descent). Other common ones include `RMSprop` and `Adam`. In general, `Adam` is the generic best optimizer. If you don't know which optimizer to use, `Adam` is always the go-to choice.

Here we rewrite our previous code by optimizers. We use `SGD` in this example. Again, we may compare the results to @sec-gradeientdescent_numpy_example and @sec-gradientdescent_pytorch_example.


```{python}
from torch.optim import SGD
import torch

lr = 0.2
b = torch.tensor(1, dtype=float, device=device, requires_grad=True)
w = torch.tensor(1.5, dtype=float, device=device, requires_grad=True)

optimizer = SGD([b, w], lr=lr)
plist = []

for epoch in range(10):
    loss = ((y_tensor_train - b - w*X_tensor_train)**2).mean()
    loss.backward()
    optimizer.step()
    optimizer.zero_grad()
    plist.append([b.item(), w.item()])
plist
```

### Use class to describe the model

We now want to upgrade the code we wrote in previous sections in terms of classes, since it is a good way to wrap up our own code.


```{python}
import torch.nn as nn

class LR(nn.Module):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.b = nn.Parameter(torch.tensor(1, requires_grad=True, dtype=float))
        self.w = nn.Parameter(torch.tensor(1.5, requires_grad=True, dtype=float))

    def forward(self, x):
        return self.b + self.w * x

RANDOMSEED = 42
torch.manual_seed(RANDOMSEED)

device = 'cuda' if torch.cuda.is_available() else 'cpu'
model = LR().to(device)
model.state_dict()
```

We could use `model.state_dict()` to look at the parameters of the model. Another way to see the parameters is to use `model.parameters()` method. The latter will return an iterator that help you go through all parameters.

```{python}
for item in model.parameters():
    print(item)
```


Now we reproduce the training code for `LR` class.


```{python}
from torch.optim import SGD

def loss_fn(yhat, y):
    return ((yhat-y)**2).mean()

lr = 0.2
optimizer = SGD(model.parameters(), lr=lr)

epoch_num = 10

plist = []
for epoch in range(epoch_num):
    model.train()

    yhat = model(X_tensor_train)
    loss = loss_fn(yhat, y_tensor_train)
    loss.backward()
    optimizer.step()
    optimizer.zero_grad()
    p = model.state_dict()
    plist.append([p['b'].item(), p['w'].item()])

plist
```




### Using standard modules

We hand write our models and set parameters in our previous versions. `PyTorch` provides many standard modules that we can use directly. For example, the linear regression model can be found in `nn.modules` as `Linear`, while our loss function is the mean square differene function which is `MSELoss` from `nn`.


```{python}
from torch.nn.modules import Linear
from torch.nn import MSELoss

class BetterLR(nn.Module):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.linear = Linear(in_features=1, out_features=1)
        self.linear.bias = torch.nn.Parameter(torch.tensor([1.0], dtype=float))
        self.linear.weight = torch.nn.Parameter(torch.tensor([[1.5]], dtype=float))

    def forward(self, x):
        return self.linear(x)

lr = 0.2

device = 'cuda' if torch.cuda.is_available() else 'cpu'
model2 = BetterLR().to(device)
optimizer2 = SGD(model2.parameters(), lr=lr)

epoch_num = 10
plist = []

for epoch in range(epoch_num):
    model2.train()

    yhat = model2(X_tensor_train.reshape(-1, 1))
    loss2 = MSELoss(reduction='mean')(yhat, y_tensor_train.reshape(-1, 1))
    loss2.backward()
    optimizer2.step()
    optimizer2.zero_grad()
    p = model2.state_dict()
    plist.append([p['linear.bias'].item(), p['linear.weight'].item()])

plist
```




::: {.callout-note}
# Initialize the parameters
In all our examples we initialize the parameters to be $(1, 1.5)$ for the purpose of comparision. In most cases, we don't manually set the intial values, but use random numbers. In this case, we simply delete the manual codes.
:::



::: {.callout-caution}

Note that if we directly change our function to the standard one we will encounter some issues. The main reason is that our previous code is an oversimplifed version that we treat `b` and `w` as two scalars. They are scalars in our particular problem, but it is better to treat them as a special case of tensors for the purpose of better generalization. Actually based on the standard functions from `PyTorch` (as well as many others like `sklearn`) `X` and `y` are expected to be 2D tensors. This is the reason why there are some strange `reshape(-1, 1 )` in the codes. 

We will reconstruct it in the later sections.
:::



