## Python quick guide

### Python Notebook
We mainly use Jupyter Notebook (.ipynb) to write documents for this course. Currently most main stream Python IDEs support Jupyter Notebook. They are not entirely identical but the differences are not huge and you may choose any you like. In this course we recommand using VS Code. The setup can be found in Appendix @sec-vscode.


### Python fundamentals
We will put some very basic Python commands here for you to warm up. More advanced Python knowledge will be covered during the rest of the semester. The main reference for this part is @Har2012. Another referenece is [My notes](https://xiaoxl.github.io/pr24/).

#### Indentation
Python is using indentation to denote code blocks. It is not convienent to write in the first place, but it forces you to write clean, readable code.

By the way, the `if` and `for` block are actually straightforward.

:::{layout-nrow=2}

```{python}
#| eval: false
if jj < 3:
    jj = jj 
    print("It is smaller than 3.")
```



```{python}
#| eval: false
if jj < 3:
    jj = jj
print("It is smaller than 3.")
```


```{python}
#| eval: false
for i in range(3):
    i = i + 1
    print(i)
```

```{python}
#| eval: false
for i in range(3):
    i = i + 1
print(i)
```
:::


Please tell the differences between the above codes.


#### `list` and `dict`
Here are some very basic usage of lists of dictionaries in Python.

```{python}
newlist = list()
newlist.append(1)
newlist.append('hello')
newlist
```

```{python}
newlisttwo = [1, 'hello']
newlisttwo
```

```{python}
newdict = dict()
newdict['one'] = 'good'
newdict[1] = 'yes'
newdict
```

```{python}
newdicttwo = {'one': 'good', 1: 'yes'}
newdicttwo
```


#### Loop through lists
When creating `for` loops we may let Python directly loop through lists. Here is an example. The code is almost self-explained.

```{python}
alist = ['one', 2, 'three', 4]

for item in alist:
    print(item)
```


#### Reading files
There are a lot of functions that can read files. The basic one is to read any files as a big string. After we get the string, we may parse it based on the structure of the data.

The above process sounds complicated. That's why we have so many different functions reading files. Usually they focus on a certain types of files (e.g. spreadsheets, images, etc..), parse the data into a particular data structure for us to use later.

I will mention a few examples.

::: {.callout-note collapse="true"}
## `csv` files and `excel` files
Both of them are spreadsheets format. Usually we use [`pandas.read_csv`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) and [`pandas.read_excel`](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) both of which are from the package `pandas` to read these two types of files. When reading `excel`, package `openpyxl` is needed.
:::


::: {.callout-note collapse="true"}
## images
Images can be treated as matrices, that each entry represents one pixel. If the image is black/white, it is represented by one matrix where each entry represents the gray value. If the image is colored, it is represented by three matrices where each entry represents one color. To use which three colors depends on the color map. `rgb` is a popular choice. 

In this course when we need to read images, we usually use [`matplotlib.pyplot.imread`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imread.html) from the package `matplotlib` or [`cv.imread`](https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56) from the package `opencv`.
:::

<!-- 
::: {.callout-note collapse="true"}
## `.json` files
`.json` is a file format to store dictionary type of data. To read a `json` file and parse it as a dictionary, we need [`json.load`](https://docs.python.org/3/library/json.html#json.load) from the package `json`. 
::: -->




#### Writing files

- [`pandas.DataFrame.to_csv`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html)
- [`pandas.DataFrame.to_excel`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_excel.html)
- [`matplotlib.figure.Figure.savefig()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.savefig.html#matplotlib.figure.Figure.savefig)
<!-- - [`cv.imwrite`](https://docs.opencv.org/3.4/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce) -->
<!-- - [`json.dump`](https://docs.python.org/3/library/json.html#json.dump) -->

#### Relative paths
In this course, when reading and writing files, please keep all the files using relative paths. That is, only write the path starting from the working directory. 


::: {#exm-}


Consider the following tasks:

1. Your working directory is `C:/Users/Xinli/projects/`.
2. Want to read a file `D:/Files/example.csv`.
3. Want to generate a file whose name is `result.csv` and put it in a subfoler named `foldername`.

To do the tasks, don't directly run the code `pd.read_csv('D:/Files/example.csv')`. Instead you should first copy the file to your working directory `C:/Users/Xinli/projects/`, and then run the following code. 

```{python}
#| eval: false
import pandas as pd

df = pd.read_csv('example.csv')
df.to_csv('foldername/result.csv')
```
Please pay attention to how the paths are written.


:::
<!-- 

#### `.`

- class and packages.
- Get access to attributes and methods
- Chaining dots. -->



<!-- ### Some additional topics -->
<!-- 
You may read about these parts from the appendices of [My notes](https://xiaoxl.github.io/pr23f/contents/app/virtenv.html).

#### Package management and Virtual environment

- [`conda`](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)
  - `conda create`
    - `conda create --name myenv` 
    - `conda create --name myenv python=3.9` 
    - `conda create --name myenv --file spec-file.txt`
  - `conda install`
    - `conda install -c conda-forge numpy`
  - `conda activate myenv`
  - `conda list`
    - `conda list numpy`
    - `conda list --explicit > spec-file.txt`
  - `conda env list`
- `pip` / [`venv`](https://docs.python.org/3/library/venv.html)
  - `python -m venv newenv`
  - `newenv\Scripts\activate`
  - `pip install`
  - `pip freeze > requirements.txt`
  - `pip install -r /path/to/requirements.txt`
  - `deactivate`

#### Version Control

- `Git`
  - [Install](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
  - `git config --list`
  - `git config --global user.name "My Name"`
  - `git config --global user.email "myemail@example.com"`
- `GitHub` -->