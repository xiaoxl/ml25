{
  "hash": "1d6c6c7ec5eaa53ca9bc5fe7fde2f186",
  "result": {
    "engine": "jupyter",
    "markdown": "# Ensemble methods\n\nAfter we get some relatively simple classifiers (sometimes also called *weak classifiers*), we might put them together to form a more complicated classifier. This type of methods is called an *ensemble method*. The basic way to ``ensemble'' classifiers together to through the voting machine.\n\nThere are mainly two ways to generate many classifiers.\n\n- `bagging`: This is also called *bootstrap aggregating*. The idea is \n  - First we randomly pick samples from the original dataset to form a bunch of new trainning datasets;\n  - Then we apply the same learning methods to those trainning datasets to get a bunch of classifiers;\n  - Finally apply all these classifiers to the data we are interested in and use the most frequent class as the result.\n- `boosting`: There are a bunch of classifiers. We assign weights to each of the classifiers and change the weights adaptively according to the results of the current combination.\n\n\n\n\n\n\n\n## Bootstrap aggregating\n\n### Basic bagging\nOne approach to get many estimators is to use the same training algorithm for every predictor and train them on different random subsets of the training set. When sampling is performed with replacement, this method is called *bagging* (short for *bootstrap aggregating*). When sampling is performed without replacement, it is called *pasting*.\n\nConsider the following example. The dataset is the one we used in Chpater 3: `make_moon`. We split the dataset into training and test sets.\n\n::: {#f418adcd .cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn.datasets import make_moons\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nX, y = make_moons(n_samples=10000, noise=0.4, random_state=42)\nplt.scatter(x=X[:, 0], y=X[:, 1], c=y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-2-output-1.png){width=582 height=411}\n:::\n:::\n\n\nWe would like to sample from the dataset to get some smaller minisets. We will use `sklearn.model_selection.ShuffleSplit` to perform the action. \n\nThe output of `ShuffleSplit` is a generator. To get the index out of it we need a `for` loop. You may check out the following code. \n\nNote that `ShuffleSplit` is originally used to shuffle data into training and test sets. We would only use the shuffle function out of it, so we will set `test_size` to be `1` and use `_` later in the `for` loop since we won't use that part of the information.\n\nWhat we finally get is a generator `rs` that produces indexes of subsets of `X_train` and `y_train`. \n\n::: {#f3aeebc5 .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.model_selection import ShuffleSplit\nn_trees = 1000\nn_instances = 100\nrs = ShuffleSplit(n_splits=n_trees, test_size=1, train_size=n_instances).split(X_train)\n```\n:::\n\n\nNow we would like to generate a list of Decision Trees. We could use the hyperparameters we get from Chapter 3. We train each tree over a certain mini set, and then evaluate the trained model over the test set. The average accuracy is around 80%.\n\nNote that `rs` is a generator. We put it in a for loop, and during each loop it will produce a list of indexes which gives a subset. We will directly train our model over the subset and use it to predict the test set. The result of each tree is put in the list `y_pred_list` and the accuracy is stored in the list `acc_list`. The mean of the accuracy is then computed by `np.mean(acc_list)`.\n\n::: {#9bb87444 .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n\ny_pred_list = list()\nacc_list = list()\nfor mini_train_index, _ in rs:\n    X_subset = X_train[mini_train_index]\n    y_subset = y_train[mini_train_index]\n    clf_ind = DecisionTreeClassifier(min_samples_split=2, max_leaf_nodes=17)\n    clf_ind.fit(X_subset, y_subset)\n    y_pred = clf_ind.predict(X_test)\n    y_pred_list.append(y_pred)\n    acc_list.append(accuracy_score(y_pred, y_test))\n\nnp.mean(acc_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0.7852906666666667\n```\n:::\n:::\n\n\nNow for each test data, we actually have `n_trees=1000` predicted results. We can treat it as the options from 1000 exports and would like to use the majority as our result. For this purpose we would like to use `mode()` which will find the most frequent entry.\n\n::: {#3641299f .cell execution_count=4}\n``` {.python .cell-code}\nfrom scipy.stats import mode\nvoting = np.array(y_pred_list)\ny_pred_mode, _ = mode(voting, axis=0, keepdims=False)\n```\n:::\n\n\nSince the output of `mode` is a tuple where the first entry is a 2D array, we need to reshape `y_pred_mode`. This is the result using this voting system. Then we are able to compute the accuracy, and find that it is increased from the previous prediction.\n\n::: {#a6af144a .cell execution_count=5}\n``` {.python .cell-code}\naccuracy_score(y_pred_mode, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.8526666666666667\n```\n:::\n:::\n\n\n### Some rough analysis\nThe point of `Bagging` is to let every classifier study part of the data, and then gather the opinions from everyone. If the performance are almost the same between individual classifers and the Bagging classifiers, this means that the majority of the individual classifiers have the same opinions. One possible reason is that the randomized subsets already catch the main features of the dataset that every individual classifiers behave similar.\n\n#### Case 1\nLet us continue with the previous dataset. We start from using Decision Tree with `max_depth=1`. In other words each tree only split once.\n\n::: {#707a6e8a .cell execution_count=6}\n``` {.python .cell-code}\nn_trees = 500\nn_instances = 1000\nrs = ShuffleSplit(n_splits=n_trees, test_size=1, train_size=n_instances).split(X_train)\ny_pred_list = list()\nacc_list = list()\nfor mini_train_index, _ in rs:\n    X_subset = X_train[mini_train_index]\n    y_subset = y_train[mini_train_index]\n    clf_ind = DecisionTreeClassifier(max_depth=1)\n    clf_ind.fit(X_subset, y_subset)\n    y_pred = clf_ind.predict(X_test)\n    y_pred_list.append(y_pred)\n    acc_list.append(accuracy_score(y_pred, y_test))\nprint('The mean of individual accuracy: {}'.format(np.mean(acc_list)))\n\nvoting = np.array(y_pred_list)\ny_pred_mode, _ = mode(voting, axis=0, keepdims=False)\nprint('The accuracy of the bagging classifier: {}'.format(accuracy_score(y_pred_mode, y_test)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean of individual accuracy: 0.7716333333333334\nThe accuracy of the bagging classifier: 0.778\n```\n:::\n:::\n\n\nThe two accuracy has some differences, but not much. This is due to the fact that the sample size of the subset is too large: 1000 can already help the individual classifers to capture the major ideas of the datasets. Let us see the first 1000 data points. The scattering plot is very similar to that of the whole dataset shown above.\n\n::: {#9e4e407e .cell execution_count=7}\n``` {.python .cell-code}\nNpiece = 1000\nplt.scatter(x=X[:Npiece, 0], y=X[:Npiece, 1], c=y[:Npiece])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-8-output-1.png){width=582 height=411}\n:::\n:::\n\n\n#### Case 2\nIf we reduce the sample size to be very small, for example, 20, the sampled subset will lose a lot of information and it will be much harder to capture the idea of the original dataset. See the scattering plot of the first 20 data points.\n\n::: {#ef033a2e .cell execution_count=8}\n``` {.python .cell-code}\nNpiece = 20\nplt.scatter(x=X[:Npiece, 0], y=X[:Npiece, 1], c=y[:Npiece])\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-html/cell-9-output-1.png){width=590 height=412}\n:::\n:::\n\n\nIn this case, let us see the performance comparison between multiple decision trees and the bagging classifier.\n\n::: {#b47598d9 .cell execution_count=9}\n``` {.python .cell-code}\nn_trees = 500\nn_instances = 20\nrs = ShuffleSplit(n_splits=n_trees, test_size=1, train_size=n_instances).split(X_train)\ny_pred_list = list()\nacc_list = list()\nfor mini_train_index, _ in rs:\n    X_subset = X_train[mini_train_index]\n    y_subset = y_train[mini_train_index]\n    clf_ind = DecisionTreeClassifier(max_depth=1)\n    clf_ind.fit(X_subset, y_subset)\n    y_pred = clf_ind.predict(X_test)\n    y_pred_list.append(y_pred)\n    acc_list.append(accuracy_score(y_pred, y_test))\nprint('The mean of individual accuracy: {}'.format(np.mean(acc_list)))\n\nvoting = np.array(y_pred_list)\ny_pred_mode, _ = mode(voting, axis=0, keepdims=False)\nprint('The accuracy of the bagging classifier: {}'.format(accuracy_score(y_pred_mode, y_test)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean of individual accuracy: 0.7122986666666666\nThe accuracy of the bagging classifier: 0.8046666666666666\n```\n:::\n:::\n\n\nThis time you may see a significant increase in the performance.\n\n\n### Using `sklearn`\n\n`sklearn` provides `BaggingClassifier` to directly perform bagging or pasting. The code is as follows.\n\n::: {#c8560eff .cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nbag_clf = BaggingClassifier(DecisionTreeClassifier(),\n                            n_estimators=1000,\n                            max_samples=100,\n                            bootstrap=True)\n```\n:::\n\n\nIn the above code, `bag_clf` is a bagging classifier, made of 500 `DecisionTreeClassifer`s, and is trained over subsets of size `100`. The option `bootstrap=True` means that it is bagging. If you would like to use pasting, the option is `bootstrap=False`.\n\nThis `bag_clf` also has `.fit()` and `.predict()` methods. It is used the same as our previous classifiers. Let us try the `make_moon` dataset.\n\n::: {#18375b4c .cell execution_count=11}\n``` {.python .cell-code}\nbag_clf.fit(X_train, y_train)\ny_pred_bag = bag_clf.predict(X_test)\naccuracy_score(y_pred_bag, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0.8506666666666667\n```\n:::\n:::\n\n\n### OOB score\nWhen we use `bagging`, it is possible that some of the training data are not used. In this case, we could record which data are not used, and just use them as the test set, instead of providing extra data for test. The data that are not used is called *out-of-bag* instances, or *oob* for short. The accuracy over the oob data is called the oob score.\n\nWe could set `oob_score=True` to enable the function when creating a `BaggingClassifier`, and use `.oob_score_` to get the oob score after training. \n\n::: {#33927974 .cell execution_count=12}\n``` {.python .cell-code}\nbag_clf_oob = BaggingClassifier(DecisionTreeClassifier(),\n                                n_estimators=1000,\n                                max_samples=100,\n                                bootstrap=True,\n                                oob_score=True)\nbag_clf_oob.fit(X_train, y_train)\nbag_clf_oob.oob_score_\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0.8667058823529412\n```\n:::\n:::\n\n\n### Random Forests\nWhen the classifiers used in a bagging classifier are all Decision Trees, the bagging classifier is called a `random forest`. `sklearn` provide `RandomForestClassifier` class. It is almost the same as `BaggingClassifier` + `DecisionTreeClassifer`.\n\n::: {#f91c9d21 .cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\nrnd_clf = RandomForestClassifier(n_estimators=1000, max_leaf_nodes=17)\nrnd_clf.fit(X_train, y_train)\ny_pred_rnd = rnd_clf.predict(X_test)\naccuracy_score(y_pred_rnd, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0.85\n```\n:::\n:::\n\n\nWhen we use the Decision Tree as our base estimators, the class `RandomForestClassifier` provides more control over growing the random forest, with a certain optimizations. If you would like to use other estimators, then `BaggingClassifier` should be used.\n\n\n\n### Extra-trees\nWhen growing a Decision Tree, our method is to search through all possible ways to find the best split point that get the lowest Gini impurity. Anohter method is to use a random split. Of course a random tree performs much worse, but if we use it to form a random forest, the voting system can help to increase the accuracy. On the other hand, random split is much faster than a regular Decision Tree. \n\nThis type of forest is called *Extremely Randomized Trees*, or *Extra-Trees* for short. We could modify the above random forest classifier code to implement the extra-tree algorithm. The key point is that we don't apply the Decision Tree algorithm to `X_subset`. Instead we perform a random split.\n\n::: {#48f55a50 .cell execution_count=14}\n``` {.python .cell-code}\nn_trees = 500\nn_instances = 20\nrs = ShuffleSplit(n_splits=n_trees, test_size=1, train_size=n_instances).split(X_train)\ny_pred_list = list()\nacc_list = list()\nfor mini_train_index, _ in rs:\n    X_subset = X_train[mini_train_index]\n    y_subset = y_train[mini_train_index]\n    clf_ind = DecisionTreeClassifier(max_depth=1)\n# random split\n    i = np.random.randint(0, X_subset.shape[0])\n    j = np.random.randint(0, X_subset.shape[1])\n    split_threshold = X_subset[i, j]\n    lsetindex = np.where(X_subset[:, j]<split_threshold)[0]\n\n    if len(lsetindex) == 0:\n        rsetindex = np.where(X_subset[:, j]>=split_threshold)\n        rmode, _ = mode(y_subset[rsetindex], keepdims=True)\n        rmode = rmode[0]\n        lmode = 1 - rmode\n    else:\n        lmode, _ = mode(y_subset[lsetindex], keepdims=True)\n        lmode = lmode[0]\n        rmode = 1 - lmode\n    y_pred = np.where(X_test[:, j] < split_threshold, lmode, rmode).reshape(-1)\n# The above code is used to use the random split to classify the data points\n    y_pred_list.append(y_pred)\n    acc_list.append(accuracy_score(y_pred, y_test))\nprint('The mean of individual accuracy: {}'.format(np.mean(acc_list)))\n\nvoting = np.array(y_pred_list)\ny_pred_mode, _ = mode(voting, axis=0, keepdims=False)\nprint('The accuracy of the bagging classifier: {}'.format(accuracy_score(y_pred_mode, y_test)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean of individual accuracy: 0.620696\nThe accuracy of the bagging classifier: 0.794\n```\n:::\n:::\n\n\nFrom the above example, you may find a significant increase in the performace from the mean individual accuracy to the Extra-tree classifier accuracy. The accuracy of the Extra-tree classifier is also very close to what we get from the original data points, although its base classifier is much simpler.\n\n\nIn `sklearn` there is an `ExtraTreesClassifier` to create such a classifier. It is hard to say which random forest is better beforehand. What we can do is to test and calculate the cross-validation scores (with grid search for hyperparameters tuning).\n\n::: {#345248a1 .cell execution_count=15}\n``` {.python .cell-code}\nfrom sklearn.ensemble import ExtraTreesClassifier\n\next_clf = ExtraTreesClassifier(n_estimators=1000, max_leaf_nodes=17)\next_clf.fit(X_train, y_train)\ny_pred_rnd = ext_clf.predict(X_test)\naccuracy_score(y_pred_rnd, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.8466666666666667\n```\n:::\n:::\n\n\nIn the above example, `RandomForestClassifier` and `ExtraTreesClassifier` get similar accuracy. However from the code below, you will see that in this example `ExtraTreesClassifier` is much faster than `RandomForestClassifier`.\n\n::: {#b64c295a .cell execution_count=16}\n``` {.python .cell-code}\nfrom time import time\nt0 = time()\nrnd_clf = RandomForestClassifier(n_estimators=1000, max_leaf_nodes=17)\nrnd_clf.fit(X_train, y_train)\nt1 = time()\nprint('Random Frorest: {}'.format(t1 - t0))\n\nt0 = time()\next_clf = ExtraTreesClassifier(n_estimators=1000, max_leaf_nodes=17)\next_clf.fit(X_train, y_train)\nt1 = time()\nprint('Extremely Randomized Trees: {}'.format(t1 - t0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Frorest: 9.331970930099487\nExtremely Randomized Trees: 2.714216470718384\n```\n:::\n:::\n\n\n### Gini importance\nAfter training a Decision Tree, we could look at each node. Each split is against a feature, which decrease the Gini impurity the most. In other words, we could say that the feature is the most important during the split.\n\nUsing the average Gini impurity decreased as a metric, we could measure the importance of each feature. This is called *Gini importance*. If the feature is useful, it tends to split mixed labeled nodes into pure single class nodes. \n\nIn the case of random forest, since there are many trees, we might compute the weighted average of the Gini importance across all trees. The weight depends on how many times the feature is used in a specific node.\n\nUsing `RandomForestClassifier`, we can directly get access to the Gini importance of each feature by `.feature_importance_`. Please see the following example.\n\n::: {#4833f59f .cell execution_count=17}\n``` {.python .cell-code}\nrnd_clf.fit(X_train, y_train)\nrnd_clf.feature_importances_\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([0.44934782, 0.55065218])\n```\n:::\n:::\n\n\nIn this example, you may see that the two features are relavely equally important, where the second feature is slightly more important since on average it decrease the Gini impurity a little bit more.\n\n\n## Voting machine\n\n\n### Voting classifier\n\nAssume that we have several trained classifiers. The easiest way to make a better classifer out of what we already have is to build a voting system. That is, each classifier give its own prediction, and it will be considered as a vote, and finally the highest vote will be the prediction of the system. \n\nIn `sklearn`, you may use `VotingClassifier`. It works as follows.\n\n::: {#268cf3a0 .cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nclfs = [('knn', KNeighborsClassifier(n_neighbors=5)),\n        ('dt', DecisionTreeClassifier(max_depth=2))]\nvoting_clf = VotingClassifier(estimators=clfs, voting='hard')\n```\n:::\n\n\nAll classifiers are stored in the list `clfs`, whose elements are tuples. The syntax is very similar to `Pipeline`. What the classifier does is to train all listed classifiers and use the majority vote to predict the class of given test data. \nIf each classifier has one vote, the voting method is `hard`. There is also a `soft` voting method. In this case, every classifiers not only can predict the classes of the given data, but also estimiate the probability of the given data that belongs to certain classes. On coding level, each classifier should have the `predict_proba()` method. In this case, the weight of each vote is determined by the probability computed. In our course we mainly use `hard` voting.\n\nLet us use `make_moon` as an example. We first load the dataset.\n\n::: {#06c676c5 .cell execution_count=19}\n``` {.python .cell-code}\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\n\nX, y = make_moons(n_samples=10000, noise=0.4, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\n```\n:::\n\n\nWe would like to apply kNN model. As before, we build a data pipeline `pipe` to first apply `MinMaxScaler` and then `KNeighborsClassifier`.\n\n::: {#928af7ed .cell execution_count=20}\n``` {.python .cell-code}\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n\npipe = Pipeline(steps=[('scalar', MinMaxScaler()),\n                       ('knn', KNeighborsClassifier())])\nparameters = {'knn__n_neighbors': list(range(1, 51))}\ngs_knn = GridSearchCV(pipe, param_grid=parameters) \ngs_knn.fit(X_train, y_train)\nclf_knn = gs_knn.best_estimator_\nclf_knn.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0.856\n```\n:::\n:::\n\n\nThe resulted accuracy is shown above.\n\n\n\n\nWe then try it with the Decision Tree.\n\n::: {#278ce676 .cell execution_count=21}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier\n\ngs_dt = GridSearchCV(DecisionTreeClassifier(), param_grid={'max_depth': list(range(1, 11)), 'max_leaf_nodes': list(range(10, 30))})\ngs_dt.fit(X_train, y_train)\nclf_dt = gs_dt.best_estimator_\nclf_dt.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n0.8586666666666667\n```\n:::\n:::\n\n\nWe would also want to try Logistic regression method. This will be covered in the next Chapter. At current stage we just use the default setting without changing any hyperparameters.\n\n::: {#adbd1a96 .cell execution_count=22}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nclf_lr = LogisticRegression()\nclf_lr.fit(X_train, y_train)\nclf_lr.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n0.834\n```\n:::\n:::\n\n\nNow we use a voting classifier to combine the results.\n\n::: {#628c33de .cell execution_count=23}\n``` {.python .cell-code}\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nclfs = [('knn', KNeighborsClassifier()),\n        ('dt', DecisionTreeClassifier()),\n        ('lr', LogisticRegression())]\nvoting_clf = VotingClassifier(estimators=clfs, voting='hard')\nvoting_clf.fit(X_train, y_train)\nvoting_clf.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n0.8433333333333334\n```\n:::\n:::\n\n\nYou may compare the results of all these four classifiers. The voting classifier is not guaranteed to be better. It is just a way to form a model.\n\n\n## `AdaBoost`\n\nThis is the first algorithm that successfully implements the boosting idea. `AdaBoost` is short for *Adaptive Boosting*. \n\n### Weighted dataset\nWe firstly talk about training a Decision Tree on a weighted dataset. The idea is very simple. When building a Decision Tree, we use some method to determine the split. In this course the Gini impurity is used. There are at least two other methods: cross-entropy and misclassified rate. For all three, the count of the elemnts in some classes is the essnetial part. To train the model over the weighted dataset, we just need to upgrade the count of the elements by the weighted count. \n\n\n\n\n\n\n::: {#exm-}\nConsider the following data:\n\n::: {#1e792a4a .cell execution_count=24}\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_771a3\">\n  <thead>\n    <tr>\n      <th id=\"T_771a3_level0_col0\" class=\"col_heading level0 col0\" >x0</th>\n      <th id=\"T_771a3_level0_col1\" class=\"col_heading level0 col1\" >x1</th>\n      <th id=\"T_771a3_level0_col2\" class=\"col_heading level0 col2\" >y</th>\n      <th id=\"T_771a3_level0_col3\" class=\"col_heading level0 col3\" >Weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_771a3_row0_col0\" class=\"data row0 col0\" >1.0</td>\n      <td id=\"T_771a3_row0_col1\" class=\"data row0 col1\" >2.1</td>\n      <td id=\"T_771a3_row0_col2\" class=\"data row0 col2\" >+</td>\n      <td id=\"T_771a3_row0_col3\" class=\"data row0 col3\" >0.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_771a3_row1_col0\" class=\"data row1 col0\" >1.0</td>\n      <td id=\"T_771a3_row1_col1\" class=\"data row1 col1\" >1.1</td>\n      <td id=\"T_771a3_row1_col2\" class=\"data row1 col2\" >+</td>\n      <td id=\"T_771a3_row1_col3\" class=\"data row1 col3\" >0.125</td>\n    </tr>\n    <tr>\n      <td id=\"T_771a3_row2_col0\" class=\"data row2 col0\" >1.3</td>\n      <td id=\"T_771a3_row2_col1\" class=\"data row2 col1\" >1.0</td>\n      <td id=\"T_771a3_row2_col2\" class=\"data row2 col2\" >-</td>\n      <td id=\"T_771a3_row2_col3\" class=\"data row2 col3\" >0.125</td>\n    </tr>\n    <tr>\n      <td id=\"T_771a3_row3_col0\" class=\"data row3 col0\" >1.0</td>\n      <td id=\"T_771a3_row3_col1\" class=\"data row3 col1\" >1.0</td>\n      <td id=\"T_771a3_row3_col2\" class=\"data row3 col2\" >-</td>\n      <td id=\"T_771a3_row3_col3\" class=\"data row3 col3\" >0.125</td>\n    </tr>\n    <tr>\n      <td id=\"T_771a3_row4_col0\" class=\"data row4 col0\" >2.0</td>\n      <td id=\"T_771a3_row4_col1\" class=\"data row4 col1\" >1.0</td>\n      <td id=\"T_771a3_row4_col2\" class=\"data row4 col2\" >+</td>\n      <td id=\"T_771a3_row4_col3\" class=\"data row4 col3\" >0.125</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nThe weighted Gini impurity is\n\n$$\n\\text{WeightedGini}=1-(0.5+0.125+0.125)^2-(0.125+0.125)^2=0.375.\n$$\n\nYou may see that the original Gini impurity is just the weighted Gini impurity with equal weights. Therefore the first tree we get from `AdaBoost` (see below) is the same tree we get from the Decision Tree model in Chpater 3.\n:::\n\n### General process\n\nHere is the rough description of `AdaBoost`.\n\n1. Assign weights to each data point. At the begining we could assign weights equally. \n2. Train a classifier based on the weighted dataset, and use it to predict on the training set. Find out all wrong answers.\n3. Adjust the weights, by inceasing the weights of data points that are done wrongly in the previous generation.\n4. Train a new classifier using the new weighted dataset. Predict on the training set and record the wrong answers. \n5. Repeat the above process to get many classifiers. The training stops either by hitting $0$ error rate, or after a specific number of rounds.\n6. The final results is based on the weighted total votes from all classifiers we trained.\n\nNow let us talk about the details. Assume there are $N$ data points. Then the inital weights are set to be $\\dfrac1N$. There are 2 sets of weights. Let $w^{(i)}$ be weights of the $i$th data points. Let $\\alpha_j$ be the weights of the $j$th classifier. After training the $j$th classifier, the error rate is denoted by $e_j$. Then we have \n\n$$\ne_j=\\frac{\\text{the total weights of data points that are misclassified by the $j$th classifier}}{\\text{the total weights of data points}}\n$$\n\n$$\n\\alpha_j=\\eta\\ln\\left(\\dfrac{1-e_j}{e_j}\\right).\n$$\n\n$$\nw^{(i)}_{\\text{new}}\\leftarrow\\text{normalization} \\leftarrow w^{(i)}\\leftarrow\\begin{cases}w^{(i)}&\\text{if the $i$th data is correctly classified,}\\\\w^{(i)}\\exp(\\alpha_j)&\\text{if the $i$th data is misclassified.}\\end{cases}\n$$\n\n\n\n::: {.callout-note}\n\nThe first tree is the same tree we get from the regular Decision Tree model. In the rest of the training process, more weights are put on the data that we are wrong in the previous iteration. Therefore the process is the mimic of \"learning from mistakes\".\n:::\n\n\n::: {.callout-note}\nThe $\\eta$ in computing $\\alpha_j$ is called the *learning rate*. It is a hyperparameter that will be specified mannually. It does exactly what it appears to do: alter the weights of each classifier. The default is `1.0`. When the number is very small (which is recommended although it can be any positive number), more iterations will be expected. \n:::\n\n### Example 1: the `iris` dataset\nSimilar to all previous models, `sklearn` provides `AdaBoostClassifier`. The way to use it is similar to previous models. Note that although we are able to use any classifiers for `AdaBoost`, the most popular choice is Decision Tree with `max_depth=1`. This type of Decision Trees are also called *Decision Stumps*.\n\nIn the following examples, we initialize an `AdaBoostClassifier` with 500 Decision Stumps and `learning_rate=0.5`. \n\n::: {#9ca10890 .cell execution_count=25}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nada_clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), n_estimators=1000,\n                             learning_rate=.5)\n```\n:::\n\n\nWe will use the `iris` dataset for illustration. The cross_val_score is calculated as follows.\n\n::: {#675e2e57 .cell execution_count=26}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\nscores = cross_val_score(ada_clf, X, y, cv=5)\nscores.mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0.9533333333333334\n```\n:::\n:::\n\n\n### Example 2: the Horse Colic dataset\nThis dataset is from UCI Machine Learning Repository. The data is about whether horses survive if they get a disease called Colic. The dataset is preprocessed as follows. Note that there are a few missing values inside, and we replace them with `0`. \n\n::: {#54b81fea .cell execution_count=27}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\nurl = 'http://archive.ics.uci.edu/ml/machine-learning-databases/horse-colic/horse-colic.data'\ndf = pd.read_csv(url, delim_whitespace=True, header=None)\ndf = df.replace(\"?\", np.NaN)\ndf = df.fillna(0)\nX = df.iloc[:, 1:].to_numpy().astype(float)\ny = df[0].to_numpy().astype(int)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)\n\nclf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), n_estimators=50, learning_rate=0.2)\nclf.fit(X_train, y_train)\nclf.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Xinli\\AppData\\Local\\Temp\\ipykernel_33896\\244007590.py:6: FutureWarning: The 'delim_whitespace' keyword in pd.read_csv is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n  df = pd.read_csv(url, delim_whitespace=True, header=None)\nC:\\Users\\Xinli\\miniforge3\\envs\\ds25\\Lib\\site-packages\\sklearn\\ensemble\\_weight_boosting.py:527: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n0.6222222222222222\n```\n:::\n:::\n\n\n## Exercises\n\n\n\n::: {#exr-}\nCHOOSE ONE: Please apply the random forest to one of the following datasets.\n\n- the `iris` dataset.\n- the dating dataset.\n- the `titanic` dataset.\n\nPlease answer the following questions.\n\n1. Please use grid search to find the good `max_leaf_nodes` and `max_depth`.\n2. Please record the cross-validation score and the OOB score of your model and compare it with the models you learned before (kNN, Decision Trees). \n3. Please find some typical features (using the Gini importance) and draw the Decision Boundary against the features you choose. \n:::\n\n\n\n\n\n::: {#exr-}\n\nPlease use the following code to get the `mgq` dataset.\n\n::: {#575012d6 .cell execution_count=28}\n``` {.python .cell-code}\nfrom sklearn.datasets import make_gaussian_quantiles\n\nX1, y1 = make_gaussian_quantiles(cov=2.0, n_samples=200, n_features=2,\n                                 n_classes=2, random_state=1)\nX2, y2 = make_gaussian_quantiles(mean=(3, 3), cov=1.5, n_samples=300,\n                                 n_features=2, n_classes=2, random_state=1)\nX = np.concatenate((X1, X2))\ny = np.concatenate((y1, -y2 + 1))\n```\n:::\n\n\nPlease build an `AdaBoost` model.\n:::\n\n\n::: {#exr-}\n\nPlease use `RandomForestClassifier`, `ExtraTreesClassifier` and `KNeighbourClassifier` to form a voting classifier, and apply to the `MNIST` dataset. \n\n\n:::\n\n\n\n::: {.callout-note}\n# `MNIST`\n\nThis dataset can be loaded using the following code.\n\n::: {#eee1abf5 .cell execution_count=29}\n``` {.python .cell-code}\nimport numpy as np\nimport requests\nfrom io import BytesIO\nr = requests.get('https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz', stream = True) \ndata = np.load(BytesIO(r.raw.read()))\nX_train = data['x_train']\nX_test = data['x_test']\ny_train = data['y_train']\ny_test = data['y_test']\n```\n:::\n\n\n:::\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}